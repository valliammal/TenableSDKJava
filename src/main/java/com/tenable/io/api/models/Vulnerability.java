package com.tenable.io.api.models;


import java.util.ArrayList;
import java.util.Date;
import java.util.List;


/**
 * Copyright (c) 2017 Tenable Network Security, Inc.
 */
public class Vulnerability {
    private SeverityLevel severity;
    private String protocol;
    private String pluginFamily;
    private int port;
    private long pluginID;
    private String pluginName;
    private List<String> bids;
    private String canvasPackage;
    private List<String> cves;
    private Float cvssBaseScore;
    private Float cvssTemporalScore;
    private String cvssTemporalVector;
    private String cvssVector;
    private Float cvss3BaseScore;
    private Float cvss3TemporalScore;
    private String cvss3TemporalVector;
    private String cvss3Vector;
    private String d2ElliotName;
    private String description;
    private Boolean exploitAvailable;
    private Boolean exploitedByNessus;
    private Boolean exploitFrameworkCanvas;
    private Boolean exploitFrameworkCore;
    private Boolean exploitFrameworkExploithub;
    private Boolean exploitFrameworkMetasploit;
    private Boolean exploitFrameworkD2Elliot;
    private Boolean exploitedByMalware;
    private Date firstFound;
    private Boolean hasPatch;
    private Boolean inTheNews;
    private Date lastFound;
    private Date lastFixed;
    private Boolean malware;
    private String metasploitName;
    private Date patchPublicationDate;
    private Date pluginModificationDate;
    private Date pluginPublicationDate;
    private String pluginOutput;
    private String pluginType;
    private String pluginVersion;
    private String solution;
    private RiskFactor riskFactor;
    private String synopsis;
    private Boolean unsupportedByVendor;
    private VulnerabilityState vulnerabilityState;
    private Date vulnPublicationDate;
    private List<String> xrefs;
    private List<String> seeAlsos;


    /**
     * Gets the vulnerability severity level.
     *
     * @return the vulnerability severity level
     */
    public SeverityLevel getSeverity() {
        return severity;
    }


    /**
     * Sets the vulnerability severity level.
     *
     * @param severity the vulnerability severity level
     */
    public void setSeverity( SeverityLevel severity ) {
        this.severity = severity;
    }


    /**
     * Sets the vulnerability severity level.
     *
     * @param severity the vulnerability severity level
     * @return the vulnerability
     */
    public Vulnerability withSeverity( SeverityLevel severity ) {
        this.severity = severity;
        return this;
    }


    /**
     * Gets the protocol used to communicate (e.g., tcp, udp).
     *
     * @return the protocol used to communicate (e.g., tcp, udp)
     */
    public String getProtocol() {
        return protocol;
    }


    /**
     * Sets the protocol used to communicate (e.g., tcp, udp).
     *
     * @param protocol the protocol used to communicate (e.g., tcp, udp)
     */
    public void setProtocol( String protocol ) {
        this.protocol = protocol;
    }


    /**
     * Sets the protocol used to communicate (e.g., tcp, udp).
     *
     * @param protocol the protocol used to communicate (e.g., tcp, udp)
     * @return the vulnerability
     */
    public Vulnerability withProtocol( String protocol ) {
        this.protocol = protocol;
        return this;
    }


    /**
     * Gets the family the plugin belongs to.
     *
     * @return the family the plugin belongs to
     */
    public String getPluginFamily() {
        return pluginFamily;
    }


    /**
     * Sets the family the plugin belongs to.
     *
     * @param pluginFamily the family the plugin belongs to
     */
    public void setPluginFamily( String pluginFamily ) {
        this.pluginFamily = pluginFamily;
    }


    /**
     * Sets the family the plugin belongs to.
     *
     * @param pluginFamily the family the plugin belongs to
     * @return the vulnerability
     */
    public Vulnerability withPluginFamily( String pluginFamily ) {
        this.pluginFamily = pluginFamily;
        return this;
    }


    /**
     * Gets the port number for the associated finding.
     *
     * @return the port number for the associated finding
     */
    public int getPort() {
        return port;
    }


    /**
     * Sets the port number for the associated finding.
     *
     * @param port the port number for the associated finding
     */
    public void setPort( int port ) {
        this.port = port;
    }


    /**
     * Sets the port number for the associated finding.
     *
     * @param port the port number for the associated finding
     * @return the vulnerability
     */
    public Vulnerability withPort( int port ) {
        this.port = port;
        return this;
    }


    /**
     * Gets the numeric ID of the plugin.
     *
     * @return the numeric ID of the plugin
     */
    public long getPluginID() {
        return pluginID;
    }


    /**
     * Sets the numeric ID of the plugin.
     *
     * @param pluginID the numeric ID of the plugin
     */
    public void setPluginID( long pluginID ) {
        this.pluginID = pluginID;
    }


    /**
     * Sets the numeric ID of the plugin.
     *
     * @param pluginID the numeric ID of the plugin
     * @return the vulnerability
     */
    public Vulnerability withPluginID( long pluginID ) {
        this.pluginID = pluginID;
        return this;
    }


    /**
     * Gets the title of the plugin.
     *
     * @return the title of the plugin
     */
    public String getPluginName() {
        return pluginName;
    }


    /**
     * Sets the title of the plugin.
     *
     * @param pluginName the title of the plugin
     */
    public void setPluginName( String pluginName ) {
        this.pluginName = pluginName;
    }


    /**
     * Sets the title of the plugin.
     *
     * @param pluginName the title of the plugin
     * @return the vulnerability
     */
    public Vulnerability withPluginName( String pluginName ) {
        this.pluginName = pluginName;
        return this;
    }


    /**
     * Gets the Securityfocus BID related to this vulnerability; Optional; explicitly excluded when minimum_vuln_info is true.
     * NOTE: will be null to indicate its value is not defined
     *
     * @return the Securityfocus BID related to this vulnerability; Optional; explicitly excluded when minimum_vuln_info is true
     */
    public List<String> getBids() {
        return bids;
    }


    /**
     * Sets the Securityfocus BID related to this vulnerability.
     *
     * @param bids the Securityfocus BID related to this vulnerability
     */
    public void setBids( List<String> bids ) {
        this.bids = bids;
    }


    /**
     * Sets the Securityfocus BID related to this vulnerability.
     *
     * @param bids the Securityfocus BID related to this vulnerability
     * @return the vulnerability
     */
    public Vulnerability withBids( List<String> bids ) {
        this.bids = bids;
        return this;
    }


    /**
     * Adds a Securityfocus BID to the list.
     *
     * @param bid the Securityfocus BID to add
     */
    public void addBid( String bid ) {
        if( bids == null )
            bids = new ArrayList<>();

        bids.add( bid );
    }


    /**
     * Gets the CANVAS Exploit package name. Optional; explicitly excluded when minimum_vuln_info is true.
     * NOTE: will be null to indicate its value is not defined
     *
     * @return the CANVAS Exploit package name. Optional; explicitly excluded when minimum_vuln_info is true
     */
    public String getCanvasPackage() {
        return canvasPackage;
    }


    /**
     * Sets the CANVAS Exploit package name.
     *
     * @param canvasPackage the CANVAS Exploit package name
     */
    public void setCanvasPackage( String canvasPackage ) {
        this.canvasPackage = canvasPackage;
    }


    /**
     * Sets the CANVAS Exploit package name.
     *
     * @param canvasPackage the CANVAS Exploit package name
     * @return the vulnerability
     */
    public Vulnerability withCanvasPackage( String canvasPackage ) {
        this.canvasPackage = canvasPackage;
        return this;
    }


    /**
     * Gets the MITRE Common Vulnerabilities and Exposures ID. Optional; explicitly excluded when minimum_vuln_info is true.
     * NOTE: will be null to indicate its value is not defined
     *
     * @return the MITRE Common Vulnerabilities and Exposures ID. Optional; explicitly excluded when minimum_vuln_info is true
     */
    public List<String> getCves() {
        return cves;
    }


    /**
     * Sets the MITRE Common Vulnerabilities and Exposures ID.
     *
     * @param cves the MITRE Common Vulnerabilities and Exposures ID
     */
    public void setCves( List<String> cves ) {
        this.cves = cves;
    }


    /**
     * Sets the MITRE Common Vulnerabilities and Exposures ID.
     *
     * @param cves the MITRE Common Vulnerabilities and Exposures ID
     * @return the vulnerability
     */
    public Vulnerability withCves( List<String> cves ) {
        this.cves = cves;
        return this;
    }


    /**
     * Adds a MITRE Common Vulnerabilities and Exposures ID to the list.
     *
     * @param cve the MITRE Common Vulnerabilities and Exposures ID to add
     */
    public void addCve( String cve ) {
        if( cves == null )
            cves = new ArrayList<>();

        cves.add( cve );
    }


    /**
     * Gets the CVSS 2.0 Base score as a floating point number 0.0 - 10.0. Optional; explicitly excluded when minimum_vuln_info is true.
     * NOTE: This score value will be null to indicate its value is not defined
     *
     * @return the CVSS 2.0 Base score as a floating point number 0.0 - 10.0. Optional; explicitly excluded when minimum_vuln_info is true
     */
    public Float getCvssBaseScore() {
        return cvssBaseScore;
    }


    /**
     * Sets the CVSS 2.0 Base score as a floating point number 0.0 - 10.0.
     * NOTE: This score value will be null to indicate its value is not defined
     *
     * @param cvssBaseScore the CVSS 2.0 Base score as a floating point number 0.0 - 10.0
     */
    public void setCvssBaseScore( Float cvssBaseScore ) {
        this.cvssBaseScore = cvssBaseScore;
    }


    /**
     * Sets the CVSS 2.0 Base score as a floating point number 0.0 - 10.0.
     * NOTE: This score value will be null to indicate its value is not defined
     *
     * @param cvssBaseScore the CVSS 2.0 Base score as a floating point number 0.0 - 10.0
     * @return the vulnerability
     */
    public Vulnerability withCvssBaseScore( Float cvssBaseScore ) {
        this.cvssBaseScore = cvssBaseScore;
        return this;
    }


    /**
     * Gets the CVSS 2.0 Temporal score as a floating point number 0.0 - 10.0. Optional; explicitly excluded when minimum_vuln_info is true.
     * NOTE: This score value will be null to indicate its value is not defined
     *
     * @return the CVSS 2.0 Temporal score as a floating point number 0.0 - 10.0. Optional; explicitly excluded when minimum_vuln_info is true
     */
    public Float getCvssTemporalScore() {
        return cvssTemporalScore;
    }


    /**
     * Sets the CVSS 2.0 Temporal score as a floating point number 0.0 - 10.0.
     * NOTE: This score value will be null to indicate its value is not defined
     *
     * @param cvssTemporalScore the CVSS 2.0 Temporal score as a floating point number 0.0 - 10.0
     */
    public void setCvssTemporalScore( Float cvssTemporalScore ) {
        this.cvssTemporalScore = cvssTemporalScore;
    }


    /**
     * Sets the CVSS 2.0 Temporal score as a floating point number 0.0 - 10.0.
     * NOTE: This score value will be null to indicate its value is not defined
     *
     * @param cvssTemporalScore the CVSS 2.0 Temporal score as a floating point number 0.0 - 10.0
     * @return the vulnerability
     */
    public Vulnerability withCvssTemporalScore( Float cvssTemporalScore ) {
        this.cvssTemporalScore = cvssTemporalScore;
        return this;
    }


    /**
     * Gets the CVSS 2.0 Temporal vector as a String. Optional; explicitly excluded when minimum_vuln_info is true.
     * NOTE: will be null to indicate its value is not defined
     *
     * @return the CVSS 2.0 Temporal vector as a String. Optional; explicitly excluded when minimum_vuln_info is true
     */
    public String getCvssTemporalVector() {
        return cvssTemporalVector;
    }


    /**
     * Sets the CVSS 2.0 Temporal vector as a String.
     *
     * @param cvssTemporalVector the CVSS 2.0 Temporal vector as a String
     */
    public void setCvssTemporalVector( String cvssTemporalVector ) {
        this.cvssTemporalVector = cvssTemporalVector;
    }


    /**
     * Sets the CVSS 2.0 Temporal vector as a String.
     *
     * @param cvssTemporalVector the CVSS 2.0 Temporal vector as a String
     * @return the vulnerability
     */
    public Vulnerability withCvssTemporalVector( String cvssTemporalVector ) {
        this.cvssTemporalVector = cvssTemporalVector;
        return this;
    }


    /**
     * Gets the CVSS 2.0 vector. Optional; explicitly excluded when minimum_vuln_info is true.
     * NOTE: will be null to indicate its value is not defined
     *
     * @return the CVSS 2.0 vector. Optional; explicitly excluded when minimum_vuln_info is true
     */
    public String getCvssVector() {
        return cvssVector;
    }


    /**
     * Sets the CVSS 2.0 vector.
     *
     * @param cvssVector the CVSS 2.0 vector
     */
    public void setCvssVector( String cvssVector ) {
        this.cvssVector = cvssVector;
    }


    /**
     * Sets the CVSS 2.0 vector.
     *
     * @param cvssVector the CVSS 2.0 vector
     * @return the vulnerability
     */
    public Vulnerability withCvssVector( String cvssVector ) {
        this.cvssVector = cvssVector;
        return this;
    }


    /**
     * Gets the CVSS 3.0 Base score as a floating point number 0.0 - 10.0. Optional; explicitly excluded when minimum_vuln_info is true.
     * NOTE: This score value will be null to indicate its value is not defined
     *
     * @return the CVSS 3.0 Base score as a floating point number 0.0 - 10.0. Optional; explicitly excluded when minimum_vuln_info is true
     */
    public Float getCvss3BaseScore() {
        return cvss3BaseScore;
    }


    /**
     * Sets the CVSS 3.0 Base score as a floating point number 0.0 - 10.0.
     * NOTE: This score value will be null to indicate its value is not defined
     *
     * @param cvss3BaseScore the CVSS 3.0 Base score as a floating point number 0.0 - 10.0
     */
    public void setCvss3BaseScore( Float cvss3BaseScore ) {
        this.cvss3BaseScore = cvss3BaseScore;
    }


    /**
     * Sets the CVSS 3.0 Base score as a floating point number 0.0 - 10.0.
     * NOTE: This score value will be null to indicate its value is not defined
     *
     * @param cvss3BaseScore the CVSS 3.0 Base score as a floating point number 0.0 - 10.0
     * @return the vulnerability
     */
    public Vulnerability withCvss3BaseScore( Float cvss3BaseScore ) {
        this.cvss3BaseScore = cvss3BaseScore;
        return this;
    }


    /**
     * Gets the CVSS 3.0 Temporal score as a floating point number 0.0 - 10.0. Optional; explicitly excluded when minimum_vuln_info is true.
     * NOTE: This score value will be null to indicate its value is not defined
     *
     * @return the CVSS 3.0 Temporal score as a floating point number 0.0 - 10.0. Optional; explicitly excluded when minimum_vuln_info is true
     */
    public Float getCvss3TemporalScore() {
        return cvss3TemporalScore;
    }


    /**
     * Sets the CVSS 3.0 Temporal score as a floating point number 0.0 - 10.0.
     * NOTE: This score value will be null to indicate its value is not defined
     *
     * @param cvss3TemporalScore the CVSS 3.0 Temporal score as a floating point number 0.0 - 10.0
     */
    public void setCvss3TemporalScore( Float cvss3TemporalScore ) {
        this.cvss3TemporalScore = cvss3TemporalScore;
    }


    /**
     * Sets the CVSS 3.0 Temporal score as a floating point number 0.0 - 10.0.
     * NOTE: This score value will be null to indicate its value is not defined
     *
     * @param cvss3TemporalScore the CVSS 3.0 Temporal score as a floating point number 0.0 - 10.0
     * @return the vulnerability
     */
    public Vulnerability withCvss3TemporalScore( Float cvss3TemporalScore ) {
        this.cvss3TemporalScore = cvss3TemporalScore;
        return this;
    }


    /**
     * Gets the CVSS 3.0 Temporal vector as a String. Optional; explicitly excluded when minimum_vuln_info is true.
     * NOTE: will be null to indicate its value is not defined
     *
     * @return the CVSS 3.0 Temporal vector as a String. Optional; explicitly excluded when minimum_vuln_info is true
     */
    public String getCvss3TemporalVector() {
        return cvss3TemporalVector;
    }


    /**
     * Sets the CVSS 3.0 Temporal vector as a String.
     *
     * @param cvss3TemporalVector the CVSS 3.0 Temporal vector as a String
     */
    public void setCvss3TemporalVector( String cvss3TemporalVector ) {
        this.cvss3TemporalVector = cvss3TemporalVector;
    }


    /**
     * Sets the CVSS 3.0 Temporal vector as a String.
     *
     * @param cvss3TemporalVector the CVSS 3.0 Temporal vector as a String
     * @return the vulnerability
     */
    public Vulnerability withCvss3TemporalVector( String cvss3TemporalVector ) {
        this.cvss3TemporalVector = cvss3TemporalVector;
        return this;
    }


    /**
     * Gets the CVSS 3.0 vector. Optional; explicitly excluded when minimum_vuln_info is true.
     * NOTE: will be null to indicate its value is not defined
     *
     * @return the CVSS 3.0 vector. Optional; explicitly excluded when minimum_vuln_info is true
     */
    public String getCvss3Vector() {
        return cvss3Vector;
    }


    /**
     * Sets the CVSS 3.0 vector.
     *
     * @param cvss3Vector the CVSS 3.0 vector
     */
    public void setCvss3Vector( String cvss3Vector ) {
        this.cvss3Vector = cvss3Vector;
    }


    /**
     * Sets the CVSS 3.0 vector.
     *
     * @param cvss3Vector the CVSS 3.0 vector
     * @return the vulnerability
     */
    public Vulnerability withCvss3Vector( String cvss3Vector ) {
        this.cvss3Vector = cvss3Vector;
        return this;
    }


    /**
     * Gets the D2 Elliot exploit package name. Optional; explicitly excluded when minimum_vuln_info is true.
     * NOTE: will be null to indicate its value is not defined
     *
     * @return the D2 Elliot exploit package name. Optional; explicitly excluded when minimum_vuln_info is true
     */
    public String getD2ElliotName() {
        return d2ElliotName;
    }


    /**
     * Sets the D2 Elliot exploit package name.
     *
     * @param d2ElliotName the D2 Elliot exploit package name
     */
    public void setD2ElliotName( String d2ElliotName ) {
        this.d2ElliotName = d2ElliotName;
    }


    /**
     * Sets the D2 Elliot exploit package name.
     *
     * @param d2ElliotName the D2 Elliot exploit package name
     * @return the vulnerability
     */
    public Vulnerability withD2ElliotName( String d2ElliotName ) {
        this.d2ElliotName = d2ElliotName;
        return this;
    }


    /**
     * Gets the description of the Nessus or PVS plugin that found the vulnerability. Explicitly excluded when minimum_vuln_info is true.
     *
     * @return the description of the Nessus or PVS plugin that found the vulnerability. Explicitly excluded when minimum_vuln_info is true
     */
    public String getDescription() {
        return description;
    }


    /**
     * Sets the description of the Nessus or PVS plugin that found the vulnerability.
     *
     * @param description the the description of the Nessus or PVS plugin that found the vulnerability
     */
    public void setDescription( String description ) {
        this.description = description;
    }


    /**
     * Sets the description of the Nessus or PVS plugin that found the vulnerability.
     *
     * @param description the the description of the Nessus or PVS plugin that found the vulnerability
     * @return the vulnerability
     */
    public Vulnerability withDescription( String description ) {
        this.description = description;
        return this;
    }


    /**
     * Gets a flag specifying whether exploits are available for the vulnerability. Optional; explicitly excluded when minimum_vuln_info is true.
     * NOTE: will be null to indicate its value is not defined
     *
     * @return a flag specifying whether exploits are available for the vulnerability. Optional; explicitly excluded when minimum_vuln_info is true
     */
    public Boolean getExploitAvailable() {
        return exploitAvailable;
    }


    /**
     * Sets a flag specifying whether exploits are available for the vulnerability.
     *
     * @param exploitAvailable a flag specifying whether exploits are available for the vulnerability
     */
    public void setExploitAvailable( Boolean exploitAvailable ) {
        this.exploitAvailable = exploitAvailable;
    }


    /**
     * Sets a flag specifying whether exploits are available for the vulnerability.
     *
     * @param exploitAvailable a flag specifying whether exploits are available for the vulnerability
     * @return the vulnerability
     */
    public Vulnerability withExploitAvailable( Boolean exploitAvailable ) {
        this.exploitAvailable = exploitAvailable;
        return this;
    }


    /**
     * Gets a flag specifying whether Nessus was able to exploit the issue. Optional; explicitly excluded when minimum_vuln_info is true.
     * NOTE: will be null to indicate its value is not defined
     *
     * @return a flag specifying whether Nessus was able to exploit the issue. Optional; explicitly excluded when minimum_vuln_info is true
     */
    public Boolean getExploitedByNessus() {
        return exploitedByNessus;
    }


    /**
     * Sets a flag specifying whether Nessus was able to exploit the issue.
     *
     * @param exploitedByNessus a flag specifying whether Nessus was able to exploit the issue
     */
    public void setExploitedByNessus( Boolean exploitedByNessus ) {
        this.exploitedByNessus = exploitedByNessus;
    }


    /**
     * Sets a flag specifying whether Nessus was able to exploit the issue.
     *
     * @param exploitedByNessus a flag specifying whether Nessus was able to exploit the issue
     * @return the vulnerability
     */
    public Vulnerability withExploitedByNessus( Boolean exploitedByNessus ) {
        this.exploitedByNessus = exploitedByNessus;
        return this;
    }


    /**
     * Gets a flag specifying whether there is a CANVAS exploit for this vulnerability. Optional; explicitly excluded when minimum_vuln_info is true.
     * NOTE: will be null to indicate its value is not defined
     *
     * @return a flag specifying whether there is a CANVAS exploit for this vulnerability. Optional; explicitly excluded when minimum_vuln_info is true.
     */
    public Boolean getExploitFrameworkCanvas() {
        return exploitFrameworkCanvas;
    }


    /**
     * Sets a flag specifying whether there is a CANVAS exploit for this vulnerability.
     *
     * @param exploitFrameworkCanvas a flag specifying whether there is a CANVAS exploit for this vulnerability
     */
    public void setExploitFrameworkCanvas( Boolean exploitFrameworkCanvas ) {
        this.exploitFrameworkCanvas = exploitFrameworkCanvas;
    }


    /**
     * Sets a flag specifying whether there is a CANVAS exploit for this vulnerability.
     *
     * @param exploitFrameworkCanvas a flag specifying whether there is a CANVAS exploit for this vulnerability
     * @return the vulnerability
     */
    public Vulnerability withExploitFrameworkCanvas( Boolean exploitFrameworkCanvas ) {
        this.exploitFrameworkCanvas = exploitFrameworkCanvas;
        return this;
    }


    /**
     * Gets a flag specifying whether there is a Core exploit for this vulnerability. Optional; explicitly excluded when minimum_vuln_info is true.
     * NOTE: will be null to indicate its value is not defined
     *
     * @return a flag specifying whether there is a Core exploit for this vulnerability. Optional; explicitly excluded when minimum_vuln_info is true
     */
    public Boolean getExploitFrameworkCore() {
        return exploitFrameworkCore;
    }


    /**
     * Sets a flag specifying whether there is a Core exploit for this vulnerability.
     *
     * @param exploitFrameworkCore a flag specifying whether there is a Core exploit for this vulnerability
     */
    public void setExploitFrameworkCore( Boolean exploitFrameworkCore ) {
        this.exploitFrameworkCore = exploitFrameworkCore;
    }


    /**
     * Sets a flag specifying whether there is a Core exploit for this vulnerability.
     *
     * @param exploitFrameworkCore a flag specifying whether there is a Core exploit for this vulnerability
     * @return the vulnerability
     */
    public Vulnerability withExploitFrameworkCore( Boolean exploitFrameworkCore ) {
        this.exploitFrameworkCore = exploitFrameworkCore;
        return this;
    }


    /**
     * Gets a flag specifying whether there is a ExploitHub exploit for this vulnerability. Optional; explicitly excluded when minimum_vuln_info is true.
     * NOTE: will be null to indicate its value is not defined
     *
     * @return a flag specifying whether there is a ExploitHub exploit for this vulnerability. Optional; explicitly excluded when minimum_vuln_info is true
     */
    public Boolean getExploitFrameworkExploithub() {
        return exploitFrameworkExploithub;
    }


    /**
     * Sets a flag specifying whether there is a ExploitHub exploit for this vulnerability.
     *
     * @param exploitFrameworkExploithub a flag specifying whether there is a ExploitHub exploit for this vulnerability
     */
    public void setExploitFrameworkExploithub( Boolean exploitFrameworkExploithub ) {
        this.exploitFrameworkExploithub = exploitFrameworkExploithub;
    }


    /**
     * Sets a flag specifying whether there is a ExploitHub exploit for this vulnerability.
     *
     * @param exploitFrameworkExploithub a flag specifying whether there is a ExploitHub exploit for this vulnerability
     * @return the vulnerability
     */
    public Vulnerability withExploitFrameworkExploithub( Boolean exploitFrameworkExploithub ) {
        this.exploitFrameworkExploithub = exploitFrameworkExploithub;
        return this;
    }


    /**
     * Gets a flag specifying whether there is a Metasploit exploit for this vulnerability. Optional; explicitly excluded when minimum_vuln_info is true.
     * NOTE: will be null to indicate its value is not defined
     *
     * @return a flag specifying whether there is a Metasploit exploit for this vulnerability. Optional; explicitly excluded when minimum_vuln_info is true
     */
    public Boolean getExploitFrameworkMetasploit() {
        return exploitFrameworkMetasploit;
    }


    /**
     * Sets a flag specifying whether there is a Metasploit exploit for this vulnerability.
     *
     * @param exploitFrameworkMetasploit a flag specifying whether there is a Metasploit exploit for this vulnerability
     */
    public void setExploitFrameworkMetasploit( Boolean exploitFrameworkMetasploit ) {
        this.exploitFrameworkMetasploit = exploitFrameworkMetasploit;
    }


    /**
     * Sets a flag specifying whether there is a Metasploit exploit for this vulnerability.
     *
     * @param exploitFrameworkMetasploit a flag specifying whether there is a Metasploit exploit for this vulnerability
     * @return the vulnerability
     */
    public Vulnerability withExploitFrameworkMetasploit( Boolean exploitFrameworkMetasploit ) {
        this.exploitFrameworkMetasploit = exploitFrameworkMetasploit;
        return this;
    }


    /**
     * Gets a flag specifying whether there is a D2 Elliot exploit for this vulnerability. Optional; explicitly excluded when minimum_vuln_info is true.
     * NOTE: will be null to indicate its value is not defined
     *
     * @return a flag specifying whether there is a D2 Elliot exploit for this vulnerability. Optional; explicitly excluded when minimum_vuln_info is true
     */
    public Boolean getExploitFrameworkD2Elliot() {
        return exploitFrameworkD2Elliot;
    }


    /**
     * Sets a flag specifying whether there is a D2 Elliot exploit for this vulnerability.
     *
     * @param exploitFrameworkD2Elliot a flag specifying whether there is a D2 Elliot exploit for this vulnerability
     */
    public void setExploitFrameworkD2Elliot( Boolean exploitFrameworkD2Elliot ) {
        this.exploitFrameworkD2Elliot = exploitFrameworkD2Elliot;
    }


    /**
     * Sets a flag specifying whether there is a D2 Elliot exploit for this vulnerability.
     *
     * @param exploitFrameworkD2Elliot a flag specifying whether there is a D2 Elliot exploit for this vulnerability
     * @return the vulnerability
     */
    public Vulnerability withExploitFrameworkD2Elliot( Boolean exploitFrameworkD2Elliot ) {
        this.exploitFrameworkD2Elliot = exploitFrameworkD2Elliot;
        return this;
    }


    /**
     * Gets a flag specifying whether malware is known to exploit this issue to infect machines. Optional; explicitly excluded when minimum_vuln_info is true.
     * NOTE: will be null to indicate its value is not defined
     *
     * @return a flag specifying whether malware is known to exploit this issue to infect machines. Optional; explicitly excluded when minimum_vuln_info is true
     */
    public Boolean getExploitedByMalware() {
        return exploitedByMalware;
    }


    /**
     * Sets a flag specifying whether malware is known to exploit this issue to infect machines.
     *
     * @param exploitedByMalware a flag specifying whether malware is known to exploit this issue to infect machines
     */
    public void setExploitedByMalware( Boolean exploitedByMalware ) {
        this.exploitedByMalware = exploitedByMalware;
    }


    /**
     * Sets a flag specifying whether malware is known to exploit this issue to infect machines.
     *
     * @param exploitedByMalware a flag specifying whether malware is known to exploit this issue to infect machines
     * @return the vulnerability
     */
    public Vulnerability withExploitedByMalware( Boolean exploitedByMalware ) {
        this.exploitedByMalware = exploitedByMalware;
        return this;
    }


    /**
     * Gets the first time the vulnerability was found for the given host as an ISO 8601 timestamp; optional.
     * NOTE: will be null to indicate its value is not defined
     *
     * @return the first time the vulnerability was found for the given host as an ISO 8601 timestamp; optional
     */
    public Date getFirstFound() {
        return firstFound;
    }


    /**
     * Sets the first time the vulnerability was found for the given host as an ISO 8601 timestamp.
     *
     * @param firstFound the first time the vulnerability was found for the given host as an ISO 8601 timestamp
     */
    public void setFirstFound( Date firstFound ) {
        this.firstFound = firstFound;
    }


    /**
     * Sets the first time the vulnerability was found for the given host as an ISO 8601 timestamp.
     *
     * @param firstFound the first time the vulnerability was found for the given host as an ISO 8601 timestamp
     * @return the vulnerability
     */
    public Vulnerability withFirstFound( Date firstFound ) {
        this.firstFound = firstFound;
        return this;
    }


    /**
     * Gets a flag specifying whether there is a known patch for the vulnerability. Optional; explicitly excluded when minimum_vuln_info is true.
     * NOTE: will be null to indicate its value is not defined
     *
     * @return a flag specifying whether there is a known patch for the vulnerability. Optional; explicitly excluded when minimum_vuln_info is true
     */
    public Boolean getHasPatch() {
        return hasPatch;
    }


    /**
     * Sets a flag specifying whether there is a known patch for the vulnerability.
     *
     * @param hasPatch a flag specifying whether there is a known patch for the vulnerability
     */
    public void setHasPatch( Boolean hasPatch ) {
        this.hasPatch = hasPatch;
    }


    /**
     * Sets a flag specifying whether there is a known patch for the vulnerability.
     *
     * @param hasPatch a flag specifying whether there is a known patch for the vulnerability
     * @return the vulnerability
     */
    public Vulnerability withHasPatch( Boolean hasPatch ) {
        this.hasPatch = hasPatch;
        return this;
    }


    /**
     * Gets a flag specifying whether the vulnerability has been given abnormal amounts of media coverage. Optional; explicitly excluded when minimum_vuln_info is true.
     * NOTE: will be null to indicate its value is not defined
     *
     * @return a flag specifying whether the vulnerability has been given abnormal amounts of media coverage. Optional; explicitly excluded when minimum_vuln_info is true
     */
    public Boolean getInTheNews() {
        return inTheNews;
    }


    /**
     * Sets a flag specifying whether the vulnerability has been given abnormal amounts of media coverage.
     *
     * @param inTheNews a flag specifying whether the vulnerability has been given abnormal amounts of media coverage
     */
    public void setInTheNews( Boolean inTheNews ) {
        this.inTheNews = inTheNews;
    }


    /**
     * Sets a flag specifying whether the vulnerability has been given abnormal amounts of media coverage.
     *
     * @param inTheNews a flag specifying whether the vulnerability has been given abnormal amounts of media coverage
     * @return the vulnerability
     */
    public Vulnerability withInTheNews( Boolean inTheNews ) {
        this.inTheNews = inTheNews;
        return this;
    }


    /**
     * Gets the last time the vulnerability was found for the given host; optional.
     * NOTE: will be null to indicate its value is not defined
     *
     * @return the last time the vulnerability was found for the given host; optional
     */
    public Date getLastFound() {
        return lastFound;
    }


    /**
     * Sets the last time the vulnerability was found for the given host.
     *
     * @param lastFound the last time the vulnerability was found for the given host
     */
    public void setLastFound( Date lastFound ) {
        this.lastFound = lastFound;
    }


    /**
     * Sets the last time the vulnerability was found for the given host.
     *
     * @param lastFound the last time the vulnerability was found for the given host
     * @return the vulnerability
     */
    public Vulnerability withLastFound( Date lastFound ) {
        this.lastFound = lastFound;
        return this;
    }


    /**
     * Gets the last time the vulnerability was found to be fixed / not present for the given host; optional.
     * NOTE: will be null to indicate its value is not defined
     *
     * @return the last time the vulnerability was found to be fixed / not present for the given host; optional
     */
    public Date getLastFixed() {
        return lastFixed;
    }


    /**
     * Sets the last time the vulnerability was found to be fixed / not present for the given host.
     *
     * @param lastFixed the last time the vulnerability was found to be fixed / not present for the given host
     */
    public void setLastFixed( Date lastFixed ) {
        this.lastFixed = lastFixed;
    }


    /**
     * Sets the last time the vulnerability was found to be fixed / not present for the given host.
     *
     * @param lastFixed the last time the vulnerability was found to be fixed / not present for the given host
     * @return the vulnerability
     */
    public Vulnerability withLastFixed( Date lastFixed ) {
        this.lastFixed = lastFixed;
        return this;
    }


    /**
     * Gets a flag specifying whether this vulnerability check was for malware and malware was found on the host. Optional; explicitly excluded when minimum_vuln_info is true.
     * NOTE: will be null to indicate its value is not defined
     *
     * @return a flag specifying whether this vulnerability check was for malware and malware was found on the host. Optional; explicitly excluded when minimum_vuln_info is true
     */
    public Boolean getMalware() {
        return malware;
    }


    /**
     * Sets a flag specifying whether this vulnerability check was for malware and malware was found on the host.
     *
     * @param malware a flag specifying whether this vulnerability check was for malware and malware was found on the host
     */
    public void setMalware( Boolean malware ) {
        this.malware = malware;
    }


    /**
     * Sets a flag specifying whether this vulnerability check was for malware and malware was found on the host.
     *
     * @param malware a flag specifying whether this vulnerability check was for malware and malware was found on the host
     * @return the vulnerability
     */
    public Vulnerability withMalware( Boolean malware ) {
        this.malware = malware;
        return this;
    }


    /**
     * Gets the Metasploit package that can be used to exploit the issue. Optional; explicitly excluded when minimum_vuln_info is true.
     * NOTE: will be null to indicate its value is not defined
     *
     * @return the Metasploit package that can be used to exploit the issue. Optional; explicitly excluded when minimum_vuln_info is true
     */
    public String getMetasploitName() {
        return metasploitName;
    }


    /**
     * Sets the Metasploit package that can be used to exploit the issue.
     *
     * @param metasploitName the Metasploit package that can be used to exploit the issue
     */
    public void setMetasploitName( String metasploitName ) {
        this.metasploitName = metasploitName;
    }


    /**
     * Sets the Metasploit package that can be used to exploit the issue.
     *
     * @param metasploitName the Metasploit package that can be used to exploit the issue
     * @return the vulnerability
     */
    public Vulnerability withMetasploitName( String metasploitName ) {
        this.metasploitName = metasploitName;
        return this;
    }


    /**
     * Gets the date a patch for this vulnerability was first published. Optional; explicitly excluded when minimum_vuln_info is true.
     * NOTE: will be null to indicate its value is not defined
     *
     * @return the date a patch for this vulnerability was first published. Optional; explicitly excluded when minimum_vuln_info is true
     */
    public Date getPatchPublicationDate() {
        return patchPublicationDate;
    }


    /**
     * Sets the date a patch for this vulnerability was first published.
     *
     * @param patchPublicationDate the date a patch for this vulnerability was first published
     */
    public void setPatchPublicationDate( Date patchPublicationDate ) {
        this.patchPublicationDate = patchPublicationDate;
    }


    /**
     * Sets the date a patch for this vulnerability was first published.
     *
     * @param patchPublicationDate the date a patch for this vulnerability was first published
     * @return the vulnerability
     */
    public Vulnerability withPatchPublicationDate( Date patchPublicationDate ) {
        this.patchPublicationDate = patchPublicationDate;
        return this;
    }


    /**
     * Gets the last date the Nessus or PVS plugin looking for the vulnerability was modified. Explicitly excluded when minimum_vuln_info is true.
     *
     * @return the last date the Nessus or PVS plugin looking for the vulnerability was modified. Explicitly excluded when minimum_vuln_info is true
     */
    public Date getPluginModificationDate() {
        return pluginModificationDate;
    }


    /**
     * Sets the last date the Nessus or PVS plugin looking for the vulnerability was modified.
     *
     * @param pluginModificationDate the last date the Nessus or PVS plugin looking for the vulnerability was modified
     */
    public void setPluginModificationDate( Date pluginModificationDate ) {
        this.pluginModificationDate = pluginModificationDate;
    }


    /**
     * Sets the last date the Nessus or PVS plugin looking for the vulnerability was modified.
     *
     * @param pluginModificationDate the last date the Nessus or PVS plugin looking for the vulnerability was modified
     * @return the vulnerability
     */
    public Vulnerability withPluginModificationDate( Date pluginModificationDate ) {
        this.pluginModificationDate = pluginModificationDate;
        return this;
    }


    /**
     * Gets the date the Nessus or PVS plugin looking for the vulnerability was published. Explicitly excluded when minimum_vuln_info is true.
     *
     * @return the date the Nessus or PVS plugin looking for the vulnerability was published. Explicitly excluded when minimum_vuln_info is true
     */
    public Date getPluginPublicationDate() {
        return pluginPublicationDate;
    }


    /**
     * Sets the date the Nessus or PVS plugin looking for the vulnerability was published.
     *
     * @param pluginPublicationDate the date the Nessus or PVS plugin looking for the vulnerability was published
     */
    public void setPluginPublicationDate( Date pluginPublicationDate ) {
        this.pluginPublicationDate = pluginPublicationDate;
    }


    /**
     * Sets the date the Nessus or PVS plugin looking for the vulnerability was published.
     *
     * @param pluginPublicationDate the date the Nessus or PVS plugin looking for the vulnerability was published
     * @return the vulnerability
     */
    public Vulnerability withPluginPublicationDate( Date pluginPublicationDate ) {
        this.pluginPublicationDate = pluginPublicationDate;
        return this;
    }


    /**
     * Gets the plugin's output about the vulnerability. May be null or empty.
     *
     * @return the plugin's output about the vulnerability. May be null or empty
     */
    public String getPluginOutput() {
        return pluginOutput;
    }


    /**
     * Sets the plugin's output about the vulnerability.
     *
     * @param pluginOutput the plugin's output about the vulnerability
     */
    public void setPluginOutput( String pluginOutput ) {
        this.pluginOutput = pluginOutput;
    }


    /**
     * Sets the plugin's output about the vulnerability.
     *
     * @param pluginOutput the plugin's output about the vulnerability
     * @return the vulnerability
     */
    public Vulnerability withPluginOutput( String pluginOutput ) {
        this.pluginOutput = pluginOutput;
        return this;
    }


    /**
     * Gets a general type for the Nessus or PVS plugin, ie: 'remote', 'local', 'mixed', etc. Explicitly excluded when minimum_vuln_info is true.
     *
     * @return a general type for the Nessus or PVS plugin, ie: 'remote', 'local', 'mixed', etc. Explicitly excluded when minimum_vuln_info is true
     */
    public String getPluginType() {
        return pluginType;
    }


    /**
     * Sets a general type for the Nessus or PVS plugin, ie: 'remote', 'local', 'mixed', etc.
     *
     * @param pluginType a general type for the Nessus or PVS plugin, ie: 'remote', 'local', 'mixed', etc
     */
    public void setPluginType( String pluginType ) {
        this.pluginType = pluginType;
    }


    /**
     * Sets a general type for the Nessus or PVS plugin, ie: 'remote', 'local', 'mixed', etc.
     *
     * @param pluginType a general type for the Nessus or PVS plugin, ie: 'remote', 'local', 'mixed', etc
     * @return the vulnerability
     */
    public Vulnerability withPluginType( String pluginType ) {
        this.pluginType = pluginType;
        return this;
    }


    /**
     * Gets the plugin's version, generally specifying how many times it has been revised. Explicitly excluded when minimum_vuln_info is true.
     *
     * @return the plugin's version, generally specifying how many times it has been revised. Explicitly excluded when minimum_vuln_info is true
     */
    public String getPluginVersion() {
        return pluginVersion;
    }


    /**
     * Sets the plugin's version, generally specifying how many times it has been revised.
     *
     * @param pluginVersion the plugin's version, generally specifying how many times it has been revised
     */
    public void setPluginVersion( String pluginVersion ) {
        this.pluginVersion = pluginVersion;
    }


    /**
     * Sets the plugin's version, generally specifying how many times it has been revised.
     *
     * @param pluginVersion the plugin's version, generally specifying how many times it has been revised
     * @return the vulnerability
     */
    public Vulnerability withPluginVersion( String pluginVersion ) {
        this.pluginVersion = pluginVersion;
        return this;
    }


    /**
     * Gets a description of the solution that can be used to resolve the vulnerability. Explicitly excluded when minimum_vuln_info is true.
     *
     * @return a description of the solution that can be used to resolve the vulnerability. Explicitly excluded when minimum_vuln_info is true
     */
    public String getSolution() {
        return solution;
    }


    /**
     * Sets a description of the solution that can be used to resolve the vulnerability.
     *
     * @param solution a description of the solution that can be used to resolve the vulnerability
     */
    public void setSolution( String solution ) {
        this.solution = solution;
    }


    /**
     * Sets a description of the solution that can be used to resolve the vulnerability.
     *
     * @param solution a description of the solution that can be used to resolve the vulnerability
     * @return the vulnerability
     */
    public Vulnerability withSolution( String solution ) {
        this.solution = solution;
        return this;
    }


    /**
     * Gets the risk factor.
     *
     * @return the risk factor
     */
    public RiskFactor getRiskFactor() {
        return riskFactor;
    }


    /**
     * Sets the risk factor.
     *
     * @param riskFactor the risk factor
     */
    public void setRiskFactor( RiskFactor riskFactor ) {
        this.riskFactor = riskFactor;
    }


    /**
     * Sets the risk factor.
     *
     * @param riskFactor the risk factor
     */
    public Vulnerability withRiskFactor( RiskFactor riskFactor ) {
        this.riskFactor = riskFactor;
        return this;
    }


    /**
     * Gets a short summary of the vulnerability. Explicitly excluded when minimum_vuln_info is true.
     *
     * @return a short summary of the vulnerability. Explicitly excluded when minimum_vuln_info is true
     */
    public String getSynopsis() {
        return synopsis;
    }


    /**
     * Sets a short summary of the vulnerability.
     *
     * @param synopsis a short summary of the vulnerability
     */
    public void setSynopsis( String synopsis ) {
        this.synopsis = synopsis;
    }


    /**
     * Sets a short summary of the vulnerability.
     *
     * @param synopsis a short summary of the vulnerability
     * @return the vulnerability
     */
    public Vulnerability withSynopsis( String synopsis ) {
        this.synopsis = synopsis;
        return this;
    }


    /**
     * Gets a flag specifying whether the vulnerability is related to the software / operating system being officially unsupported. Optional; explicitly excluded when minimum_vuln_info is true.
     * NOTE: will be null to indicate its value is not defined
     *
     * @return a flag specifying whether the vulnerability is related to the software / operating system being officially unsupported. Optional; explicitly excluded when minimum_vuln_info is true
     */
    public Boolean getUnsupportedByVendor() {
        return unsupportedByVendor;
    }


    /**
     * Sets a flag specifying whether the vulnerability is related to the software / operating system being officially unsupported.
     *
     * @param unsupportedByVendor a flag specifying whether the vulnerability is related to the software / operating system being officially unsupported
     */
    public void setUnsupportedByVendor( Boolean unsupportedByVendor ) {
        this.unsupportedByVendor = unsupportedByVendor;
    }


    /**
     * Sets a flag specifying whether the vulnerability is related to the software / operating system being officially unsupported.
     *
     * @param unsupportedByVendor a flag specifying whether the vulnerability is related to the software / operating system being officially unsupported
     * @return the vulnerability
     */
    public Vulnerability withUnsupportedByVendor( Boolean unsupportedByVendor ) {
        this.unsupportedByVendor = unsupportedByVendor;
        return this;
    }


    /**
     * Gets the state of this vulnerability in the environment for the host.
     * The values are 'ACTIVE', 'NEW', 'FIXED' and 'RESURFACED'. A value of 'NEW' means the vulnerability was first found within the preceding 14 days.
     *
     * @return the state of this vulnerability in the environment for the host
     */
    public VulnerabilityState getVulnerabilityState() {
        return vulnerabilityState;
    }


    /**
     * Sets the state of this vulnerability in the environment for the host.
     *
     * @param vulnerabilityState the state of this vulnerability in the environment for the host
     */
    public void setVulnerabilityState( VulnerabilityState vulnerabilityState ) {
        this.vulnerabilityState = vulnerabilityState;
    }


    /**
     * Sets the state of this vulnerability in the environment for the host.
     *
     * @param vulnerabilityState the state of this vulnerability in the environment for the host
     * @return the vulnerability
     */
    public Vulnerability withVulnerabilityState( VulnerabilityState vulnerabilityState ) {
        this.vulnerabilityState = vulnerabilityState;
        return this;
    }


    /**
     * Gets the date when this vulnerability was officially made public. Optional; explicitly excluded when minimum_vuln_info is true.
     * NOTE: will be null to indicate its value is not defined
     *
     * @return the date when this vulnerability was officially made public. Optional; explicitly excluded when minimum_vuln_info is true
     */
    public Date getVulnPublicationDate() {
        return vulnPublicationDate;
    }


    /**
     * Sets the date when this vulnerability was officially made public.
     *
     * @param vulnPublicationDate the date when this vulnerability was officially made public
     */
    public void setVulnPublicationDate( Date vulnPublicationDate ) {
        this.vulnPublicationDate = vulnPublicationDate;
    }


    /**
     * Sets the date when this vulnerability was officially made public.
     *
     * @param vulnPublicationDate the date when this vulnerability was officially made public
     * @return the vulnerability
     */
    public Vulnerability withVulnPublicationDate( Date vulnPublicationDate ) {
        this.vulnPublicationDate = vulnPublicationDate;
        return this;
    }


    /**
     * Gets an external reference identifier in the following format: TYPE:IDENTIFIER, e.g. 'OSVDB:11124'; Similar to CVE / BID. Optional; excluded when minimum_vuln_info is true.
     * NOTE: will be null to indicate its value is not defined
     *
     * @return an external reference identifier in the following format: TYPE:IDENTIFIER, e.g. 'OSVDB:11124'; Similar to CVE / BID. Optional; excluded when minimum_vuln_info is true
     */
    public List<String> getXrefs() {
        return xrefs;
    }


    /**
     * Sets an external reference identifier in the following format: TYPE:IDENTIFIER, e.g. 'OSVDB:11124'; Similar to CVE / BID.
     *
     * @param xrefs an external reference identifier in the following format: TYPE:IDENTIFIER, e.g. 'OSVDB:11124'; Similar to CVE / BID
     */
    public void setXrefs( List<String> xrefs ) {
        this.xrefs = xrefs;
    }


    /**
     * Sets an external reference identifier in the following format: TYPE:IDENTIFIER, e.g. 'OSVDB:11124'; Similar to CVE / BID.
     *
     * @param xrefs an external reference identifier in the following format: TYPE:IDENTIFIER, e.g. 'OSVDB:11124'; Similar to CVE / BID
     * @return the vulnerability
     */
    public Vulnerability withXrefs( List<String> xrefs ) {
        this.xrefs = xrefs;
        return this;
    }


    /**
     * Adds an external reference identifier to the list.
     *
     * @param xref the an external reference identifier to add
     */
    public void addXref( String xref ) {
        if( xrefs == null )
            xrefs = new ArrayList<>();

        xrefs.add( xref );
    }


    /**
     * Gets a URL where additional information about the vulnerability can be found. Optional; explicitly excluded when minimum_vuln_info is true.
     * NOTE: will be null to indicate its value is not defined
     *
     * @return a URL where additional information about the vulnerability can be found. Optional; explicitly excluded when minimum_vuln_info is true
     */
    public List<String> getSeeAlsos() {
        return seeAlsos;
    }


    /**
     * Sets a URL where additional information about the vulnerability can be found.
     *
     * @param seeAlsos a URL where additional information about the vulnerability can be found
     */
    public void setSeeAlsos( List<String> seeAlsos ) {
        this.seeAlsos = seeAlsos;
    }


    /**
     * Sets a URL where additional information about the vulnerability can be found.
     *
     * @param seeAlsos a URL where additional information about the vulnerability can be found
     * @return the vulnerability
     */
    public Vulnerability withSeeAlsos( List<String> seeAlsos ) {
        this.seeAlsos = seeAlsos;
        return this;
    }


    /**
     * Adds a URL where additional information about the vulnerability can be found to the list.
     *
     * @param seeAlso the URL to add
     */
    public void addSeeAlso( String seeAlso ) {
        if( seeAlsos == null )
            seeAlsos = new ArrayList<>();

        seeAlsos.add( seeAlso );
    }
}