apply plugin: 'java'
apply plugin: 'maven'
apply plugin: 'maven-publish'

group = 'com.tenable'
version = '1.4.1'

description = """"""

sourceCompatibility = 1.7
targetCompatibility = 1.7



repositories {
    mavenCentral()
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java

            artifactId 'tenable-io'
        }
    }
}

dependencies {
    compile group: 'org.apache.httpcomponents', name: 'httpasyncclient', version:'4.1.2'
    compile group: 'org.apache.httpcomponents', name: 'httpmime', version: '4.5.2'
    compile group: 'com.fasterxml.jackson.core', name: 'jackson-core', version:'[2.0.0,)'
    compile group: 'com.fasterxml.jackson.core', name: 'jackson-annotations', version:'[2.0.0,)'
    compile group: 'com.fasterxml.jackson.core', name: 'jackson-databind', version:'[2.0.0,)'
    compile group: 'org.slf4j', name: 'slf4j-api', version: '1.7.23'
    testCompile group: 'junit', name: 'junit', version:'4.12'
    testCompile group: 'org.slf4j', name: 'slf4j-log4j12', version: '1.7.23'
}

// Configure this block to run the tests
test {
    // add a gradle.properties file in the form:
  
    // systemProp.policyTemplateName=basic
    // systemProp.scanAltTargets=target2.tenable.com
    // systemProp.scanTemplateName=basic
    // systemProp.scanTextTargets=target1.tenable.com
    // systemProp.tenableIoAccessKey=********
    // systemProp.tenableIoHost=develop.cloud.tenable.com
    // systemProp.tenableIoSecretKey=********
    // systemProp.userDomainName=tenable.dev
    // systemProp.registryHost=registry.cloud.tenable.com
    // systemProp.registryProtocol=https
 
    // Access key and secret
    jvmArgs "-DtenableIoAccessKey=" + System.properties['tenableIoAccessKey']
    jvmArgs "-DtenableIoSecretKey=" + System.properties['tenableIoSecretKey']
    // A valid domain name for username
    jvmArgs "-DuserDomainName=" + System.properties['userDomainName']
    // Comma-separated list of host targets to create a scan with. (Warning: do not scan targets that you're not authorized to.)
    jvmArgs "-DscanTextTargets=" + System.properties['scanTextTargets']
    // Comma-separated list of host alternative targets to launch a scan with. (Warning: do not scan targets that you're not authorized to.)
    jvmArgs "-DscanAltTargets=" + System.properties['scanAltTargets']
    // Name of template to create a scan with.
    jvmArgs "-DscanTemplateName=" + System.properties['scanTemplateName']
    // Name of template to create a policy with.
    jvmArgs "-DpolicyTemplateName=" + System.properties['policyTemplateName']
    // Name of tenable io host to run tests
    jvmArgs "-DtenableIoHost=" + System.properties['tenableIoHost']
    // Name of registry to be used for containers
    jvmArgs "-DregistryHost=" + System.properties['registryHost']
    // Name of registry protocol be used for containers
    jvmArgs "-DregistryProtocol=" + System.properties['registryProtocol']
 
    exclude '**/containerSecurity/**'   
    exclude '**/examples/**'

    afterTest { desc, result ->
        logger.quiet "Executing test ${desc.name} [${desc.className}] with result: ${result.resultType}"
    }
}
